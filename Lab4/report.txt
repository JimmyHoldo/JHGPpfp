RESULTS FROM CRITERION

The benchmarks are run on a computer with a 4-core Intel Core i7-6700HQ processor, on a laptop.
The laptop was running on battery at the time.

The results from running our 4 algorithms first with 4 cores then with 1.
buySellP: The parallel version using Repa traverse and fold.
buySellS: The sequential version using Repa traverse and foldS.
buySell:  A sequential version using dynamic programming over an Repa array.
buySellList: The same sequential version with dynamic programming but over lists instead.
More details on the algorithms in the next section.

----------

./LabRepa +RTS -N4 -ls
Choose length of array:
1000
benchmarking buySellP
time                 5.613 ms   (5.193 ms .. 6.053 ms)
                     0.957 R²   (0.924 R² .. 0.978 R²)
mean                 5.765 ms   (5.534 ms .. 6.106 ms)
std dev              884.7 μs   (635.3 μs .. 1.163 ms)
variance introduced by outliers: 78% (severely inflated)

benchmarking buySell
time                 38.15 μs   (34.24 μs .. 42.22 μs)
                     0.949 R²   (0.934 R² .. 0.977 R²)
mean                 41.80 μs   (39.84 μs .. 44.81 μs)
std dev              7.879 μs   (4.840 μs .. 12.58 μs)
variance introduced by outliers: 95% (severely inflated)

benchmarking buySellList
time                 8.185 μs   (7.755 μs .. 8.703 μs)
                     0.986 R²   (0.976 R² .. 0.998 R²)
mean                 7.897 μs   (7.720 μs .. 8.368 μs)
std dev              915.7 ns   (435.6 ns .. 1.595 μs)
variance introduced by outliers: 90% (severely inflated)

benchmarking buySellS
time                 11.00 ms   (6.922 ms .. 14.42 ms)
                     0.693 R²   (0.482 R² .. 0.850 R²)
mean                 17.96 ms   (15.94 ms .. 20.25 ms)
std dev              5.208 ms   (4.662 ms .. 5.988 ms)
variance introduced by outliers: 91% (severely inflated)

----------

./LabRepa +RTS -N1 -ls
Choose length of array:
1000
benchmarking buySellP
time                 7.138 ms   (7.025 ms .. 7.256 ms)
                     0.998 R²   (0.996 R² .. 0.999 R²)
mean                 7.312 ms   (7.237 ms .. 7.491 ms)
std dev              325.6 μs   (171.6 μs .. 606.4 μs)
variance introduced by outliers: 22% (moderately inflated)

benchmarking buySell
time                 16.59 μs   (16.48 μs .. 16.73 μs)
                     0.999 R²   (0.999 R² .. 1.000 R²)
mean                 16.71 μs   (16.60 μs .. 16.87 μs)
std dev              456.6 ns   (302.5 ns .. 691.2 ns)
variance introduced by outliers: 30% (moderately inflated)

benchmarking buySellList
time                 7.501 μs   (7.485 μs .. 7.520 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 7.495 μs   (7.488 μs .. 7.504 μs)
std dev              27.42 ns   (21.13 ns .. 35.76 ns)

benchmarking buySellS
time                 7.030 ms   (6.949 ms .. 7.134 ms)
                     0.998 R²   (0.996 R² .. 1.000 R²)
mean                 7.078 ms   (7.017 ms .. 7.188 ms)
std dev              216.3 μs   (137.3 μs .. 350.0 μs)
variance introduced by outliers: 11% (moderately inflated)

--------------------
ALGORITHMS

buySellS
This algorithm traverses each element in the list and
for each element it traveses the rest of the list to
find the best trade that involves buying this element and
selling it at a later point.
Then goes through all the trades and find the best (if any).
1000 elements took: 7.030 ms

buySellP
This is the parallel version of buySellS.
It finds the best trade for each element in parallel and
then folds the list of best trades in parallel.
1000 elements took: 5.613 ms

buySell
This version goes throught the array once to find the best trade.
For each element it:
- Checks if this is the cheapest stock encountered,
    if so it remembers this element as the cheapest and continues.
- Checks if selling the current cheapest stock here would
  give the highest profit,
    if so it remembers buying the current chepest stock and 
    selling it here as the best trade and continues.
- Otherwise it continues.
1000 elements took: 16.59 μs

buySellList
The same as buySell but uses lists instead of Repa arrays.
1000 elements took: 7.501 μs

--------------------
WORK AND DEPTH

The input size is n
The Work and Depth are not given in exact nr of instructions.
Rather each term has a hidden constant that is the number of
instructions per iteration.

----------

buySellP
Work:           0.5*n^2 + n
Actual Depth:   0.5*n + n
Possible Depth: 1.5*(log n)

For work we have to for each element go through the 
remainder of the list. The remainder is on average
half the size of the list (= 0.5*n^2).
Then we have to go through all the results to find
the best one (= n).

For depth we can calculate the best trade for each 
element in parallel. (n)
When finding the best trade for each element we must
travese the rest of the list (0.5*n)
However we could compare the different trades
logarithmically (0.5*(log n))
Though we don't do this because each parallel task
would become really small.
Then we need to go through the resulting trades
to find the best one (n).
Though again this could be done logarithmically (log n).
